/* Generated by chaintool.  DO NOT EDIT */

package appinit

import (
	"fmt"
	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric/core/chaincode/shim"
	pb "github.com/hyperledger/fabric/protos/peer"
	"hyperledger/ccs/api"
)

type CCInterface interface {
	Init(shim.ChaincodeStubInterface, *Init) error
}

type stubImpl struct {
	intf CCInterface
}

// Factory mechanics
type factoryImpl struct {
}

func init() {
	self := &factoryImpl{}
	api.Register("appinit", self)
}

func (self *factoryImpl) Create(intf interface{}) (api.Dispatcher, error) {
	return &stubImpl{intf: intf.(CCInterface)}, nil
}

func (self *stubImpl) Dispatch(stub shim.ChaincodeStubInterface, function int, params []byte) pb.Response {
	// Handle different functions
	switch {
	case function == 1:
		return self.proxyInit(stub, params)
	default:
		return shim.Error("Received unknown function invocation")
	}
}

/* Server stubs */
func (self *stubImpl) proxyInit(stub shim.ChaincodeStubInterface, _params []byte) pb.Response {

	var err error

	params := &Init{}
	err = proto.Unmarshal(_params, params)
	if err != nil {
		return shim.Error(fmt.Sprintf("protobuf unmarshal error: %s", err))
	}

	err = self.intf.Init(stub, params)
	if err != nil {
		return shim.Error(err.Error())
	}

	return shim.Success(nil)
}
