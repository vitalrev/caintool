/* Generated by chaintool.  DO NOT EDIT */

package example02

import (
	"fmt"
	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric/core/chaincode/shim"
	pb "github.com/hyperledger/fabric/protos/peer"
	"hyperledger/ccs/api"
)

type CCInterface interface {
	MakePayment(shim.ChaincodeStubInterface, *PaymentParams) error
	DeleteAccount(shim.ChaincodeStubInterface, *Entity) error
	CheckBalance(shim.ChaincodeStubInterface, *Entity) (*BalanceResult, error)
}

type stubImpl struct {
	intf CCInterface
}

// Factory mechanics
type factoryImpl struct {
}

func init() {
	self := &factoryImpl{}
	api.Register("org.hyperledger.chaincode.example02", self)
}

func (self *factoryImpl) Create(intf interface{}) (api.Dispatcher, error) {
	return &stubImpl{intf: intf.(CCInterface)}, nil
}

func (self *stubImpl) Dispatch(stub shim.ChaincodeStubInterface, function int, params []byte) pb.Response {
	// Handle different functions
	switch {
	case function == 1:
		return self.proxyMakePayment(stub, params)
	case function == 2:
		return self.proxyDeleteAccount(stub, params)
	case function == 3:
		return self.proxyCheckBalance(stub, params)
	default:
		return shim.Error("Received unknown function invocation")
	}
}

/* Server stubs */
func (self *stubImpl) proxyMakePayment(stub shim.ChaincodeStubInterface, _params []byte) pb.Response {

	var err error

	params := &PaymentParams{}
	err = proto.Unmarshal(_params, params)
	if err != nil {
		return shim.Error(fmt.Sprintf("protobuf unmarshal error: %s", err))
	}

	err = self.intf.MakePayment(stub, params)
	if err != nil {
		return shim.Error(err.Error())
	}

	return shim.Success(nil)
}

func (self *stubImpl) proxyDeleteAccount(stub shim.ChaincodeStubInterface, _params []byte) pb.Response {

	var err error

	params := &Entity{}
	err = proto.Unmarshal(_params, params)
	if err != nil {
		return shim.Error(fmt.Sprintf("protobuf unmarshal error: %s", err))
	}

	err = self.intf.DeleteAccount(stub, params)
	if err != nil {
		return shim.Error(err.Error())
	}

	return shim.Success(nil)
}

func (self *stubImpl) proxyCheckBalance(stub shim.ChaincodeStubInterface, _params []byte) pb.Response {

	var err error

	params := &Entity{}
	err = proto.Unmarshal(_params, params)
	if err != nil {
		return shim.Error(fmt.Sprintf("protobuf unmarshal error: %s", err))
	}

	result, err := self.intf.CheckBalance(stub, params)
	if err != nil {
		return shim.Error(err.Error())
	}

	_result, err := proto.Marshal(result)
	if err != nil {
		return shim.Error(fmt.Sprintf("protobuf marshal error: %s", err))
	}
	return shim.Success(_result)
}
