package ccs

import (
	"errors"
	"github.com/hyperledger/fabric/core/chaincode/shim"
	"hyperledger/cci/org/hyperledger/chaintool/meta"
)

var interfaces = map[string][]byte{
	"appinit": []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x55\x8c\x3d\x0f\x82\x40\x10\x44\xfb\xfb\x15\x93\x50\x63\x14\x3b\x89\x05\x6a\xa2\x24\x16\x04\x1b\xdb\x0b\xac\xb0\x11\x4f\x72\x7b\x92\x10\xe3\x7f\xf7\x88\x5f\xb8\xc5\x14\xf3\x66\x5f\xa0\x02\xac\xaf\x6d\x6f\xb9\xaa\x1d\xb6\x96\x2a\xec\xb4\x9c\xd9\x08\x92\xa6\x41\x3e\xd4\x82\x9c\x84\x6c\x47\xa5\x0a\xfc\xfc\x90\x6d\x8e\xe1\x9e\x0b\x32\x42\x61\x5a\x92\x71\x7c\x62\xb2\x0b\x24\xad\x2e\x6a\x0a\xa3\xc9\xd4\xef\xd4\x85\x44\x74\x45\xc8\xb4\x75\x3d\xee\x0a\xef\x13\x67\xd9\x54\x18\xde\x7c\xbf\xc4\x2c\xfe\x22\x36\x6e\x1e\x01\x9d\x6e\x6e\x04\x8f\xa2\x58\x3d\x7e\xa2\xd4\xb0\x1b\x79\x5e\xde\x76\xc8\xe4\x5f\x33\x22\xab\x8f\xe5\x09\xa1\x95\x7d\xef\xe8\x00\x00\x00"),
	"org.hyperledger.chaincode.example02": []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x6d\x8f\x41\x4f\x83\x40\x10\x85\xef\xfb\x2b\x26\xe1\xd2\x1e\x30\x4a\x6f\x36\x3d\x60\x31\x6a\xa2\x09\x69\x2f\x5e\xc7\x65\x0a\x1b\x60\x21\x3b\x43\x13\x62\xfc\xef\x6e\x5d\x62\x21\xba\xb7\x99\xf7\x66\xdf\xfb\x22\x15\xc1\xbe\xeb\x47\x67\xca\x4a\xe0\xc9\x51\x09\xcf\xc8\xb5\xb1\x0c\x69\xd3\xc0\xe1\xb2\x66\x38\x10\x93\x3b\x53\xa1\x22\x6f\x3f\xe6\xd9\x7b\xfc\x6a\x34\x59\xa6\xf8\xa5\x20\x2b\xe6\x64\xc8\xdd\x43\xda\xa3\xae\x28\x4e\x6e\x6e\xbd\x4f\xb5\xc4\x8c\x25\x41\x8e\x63\xeb\x3d\x39\x3a\x6c\x19\x3e\x15\x4c\x8f\xc5\x19\x5b\x42\x8f\x4e\xc6\xa3\xd3\xb0\x83\xbb\xed\xbf\x62\xc6\xe2\xc5\xe4\x2a\x1a\x2b\x9b\x04\x00\xdb\x6e\xb0\xe2\xe7\x1d\x6c\xb6\xea\xeb\x9a\xf8\xe8\x1b\xc9\xf8\x37\xca\x14\x21\x64\x66\x7d\xc0\x06\xad\x26\xcf\x37\x34\x32\xbb\x08\x11\x1f\x41\xfd\xbd\x3a\x0d\x56\x8b\xe9\xec\x1c\xe3\xdc\xf9\x6f\xdf\xb0\xa6\x89\x73\xb5\xe0\x5d\x2f\xb1\x7e\xcc\x19\x35\x24\x94\x6a\x7d\xa9\xbf\x0a\x65\xd7\x4b\xc2\x65\xad\x7d\x45\xba\x9e\x56\x33\x7f\x80\xfe\x06\xf8\x81\x3d\x25\xc1\x01\x00\x00"),
}

var facts = &meta.Facts{
	Facts: []*meta.Facts_Fact{
		&meta.Facts_Fact{Name: "Application Name", Value: "org.hyperledger.chaincode.example02"},
		&meta.Facts_Fact{Name: "Application Version", Value: "0.1-SNAPSHOT"},
		&meta.Facts_Fact{Name: "Platform", Value: "org.hyperledger.chaincode.golang version 1"},
		&meta.Facts_Fact{Name: "Go Version", Value: "go1.7.5 linux/amd64"},
		&meta.Facts_Fact{Name: "Chaintool Version", Value: "1.0.0"},
	},
}

type ChaincodeMetaData struct {
}

func (self *ChaincodeMetaData) GetInterfaces(stub shim.ChaincodeStubInterface, params *meta.GetInterfacesParams) (*meta.Interfaces, error) {

	response := &meta.Interfaces{}
	for name, data := range interfaces {
		desc := &meta.InterfaceDescriptor{Name: name}

		if params.IncludeContent {
			desc.Data = data
		}

		response.Descriptors = append(response.Descriptors, desc)
	}

	return response, nil
}

func (self *ChaincodeMetaData) GetInterface(stub shim.ChaincodeStubInterface, params *meta.GetInterfaceParams) (*meta.InterfaceDescriptor, error) {

	intf, ok := interfaces[params.Name]
	if !ok {
		return nil, errors.New("Interface " + params.Name + " not found")
	}

	return &meta.InterfaceDescriptor{Data: intf}, nil
}

func (self *ChaincodeMetaData) GetFacts(stub shim.ChaincodeStubInterface, params *meta.GetFactsParams) (*meta.Facts, error) {

	return facts, nil
}
