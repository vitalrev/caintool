{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name cljs.tools.cli, :imports nil, :requires {s clojure.string, clojure.string clojure.string, goog.string.format goog.string.format, gs goog.string, goog.string goog.string}, :uses nil, :defs {pr-join {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 172, :column 8, :end-line 172, :end-column 15, :private true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}}, :private true, :name cljs.tools.cli/pr-join, :variadic true, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}, :method-params [(xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 172, :end-line 172, :max-fixed-arity 0, :fn-var true, :arglists ([& xs])}, missing-required-error {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 175, :column 8, :end-line 175, :end-column 30, :private true, :arglists (quote ([opt example-required]))}, :private true, :name cljs.tools.cli/missing-required-error, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :end-column 30, :method-params ([opt example-required]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opt example-required]))}, parse-opts {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 313, :column 25, :end-line 313, :end-column 35, :added "0.3.0", :arglists (quote ([args option-specs & options])), :doc "Parse arguments sequence according to given option specifications and the\n  GNU Program Argument Syntax Conventions:\n\n    https://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html\n\n  Option specifications are a sequence of vectors with the following format:\n\n    [short-opt long-opt-with-required-description description\n     :property value]\n\n  The first three string parameters in an option spec are positional and\n  optional, and may be nil in order to specify a later parameter.\n\n  By default, options are toggles that default to nil, but the second string\n  parameter may be used to specify that an option requires an argument.\n\n    e.g. [\"-p\" \"--port PORT\"] specifies that --port requires an argument,\n         of which PORT is a short description.\n\n  The :property value pairs are optional and take precedence over the\n  positional string arguments. The valid properties are:\n\n    :id           The key for this option in the resulting option map. This\n                  is normally set to the keywordized name of the long option\n                  without the leading dashes.\n\n                  Multiple option entries can share the same :id in order to\n                  transform a value in different ways, but only one of these\n                  option entries may contain a :default entry.\n\n                  This option is mandatory.\n\n    :short-opt    The short format for this option, normally set by the first\n                  positional string parameter: e.g. \"-p\". Must be unique.\n\n    :long-opt     The long format for this option, normally set by the second\n                  positional string parameter; e.g. \"--port\". Must be unique.\n\n    :required     A description of the required argument for this option if\n                  one is required; normally set in the second positional\n                  string parameter after the long option: \"--port PORT\".\n\n                  The absence of this entry indicates that the option is a\n                  boolean toggle that is set to true when specified on the\n                  command line.\n\n    :desc         A optional short description of this option.\n\n    :default      The default value of this option. If none is specified, the\n                  resulting option map will not contain an entry for this\n                  option unless set on the command line.\n\n    :default-desc An optional description of the default value. This should be\n                  used when the string representation of the default value is\n                  too ugly to be printed on the command line.\n\n    :parse-fn     A function that receives the required option argument and\n                  returns the option value.\n\n                  If this is a boolean option, parse-fn will receive the value\n                  true. This may be used to invert the logic of this option:\n\n                  [\"-q\" \"--quiet\"\n                   :id :verbose\n                   :default true\n                   :parse-fn not]\n\n    :assoc-fn     A function that receives the current option map, the current\n                  option :id, and the current parsed option value, and returns\n                  a new option map.\n\n                  This may be used to create non-idempotent options, like\n                  setting a verbosity level by specifying an option multiple\n                  times. (\"-vvv\" -> 3)\n\n                  [\"-v\" \"--verbose\"\n                   :default 0\n                   :assoc-fn (fn [m k _] (update-in m [k] inc))]\n\n    :validate     A vector of [validate-fn validate-msg ...]. Multiple pairs\n                  of validation functions and error messages may be provided.\n\n    :validate-fn  A vector of functions that receives the parsed option value\n                  and returns a falsy value or throws an exception when the\n                  value is invalid. The validations are tried in the given\n                  order.\n\n    :validate-msg A vector of error messages corresponding to :validate-fn\n                  that will be added to the :errors vector on validation\n                  failure.\n\n  parse-opts returns a map with four entries:\n\n    {:options     The options map, keyed by :id, mapped to the parsed value\n     :arguments   A vector of unprocessed arguments\n     :summary     A string containing a minimal options summary\n     :errors      A possible vector of error message strings generated during\n                  parsing; nil when no errors exist}\n\n  A few function options may be specified to influence the behavior of\n  parse-opts:\n\n    :in-order     Stop option processing at the first unknown argument. Useful\n                  for building programs with subcommands that have their own\n                  option specs.\n\n    :no-defaults  Only include option values specified in arguments and do not\n                  include any default values in the resulting options map.\n                  Useful for parsing options from multiple sources; i.e. from a\n                  config file and from the command line.\n\n    :strict       Parse required arguments strictly: if a required argument value\n                  matches any other option, it is considered to be missing (and\n                  you have a parse error).\n\n    :summary-fn   A function that receives the sequence of compiled option specs\n                  (documented at #'clojure.tools.cli/compile-option-specs), and\n                  returns a custom option summary string.\n  ", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(args option-specs options)], :arglists ([args option-specs & options]), :arglists-meta (nil)}}, :added "0.3.0", :name cljs.tools.cli/parse-opts, :variadic true, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :end-column 35, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(args option-specs options)], :arglists ([args option-specs & options]), :arglists-meta (nil)}, :method-params [(args option-specs options)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 313, :end-line 313, :max-fixed-arity 2, :fn-var true, :arglists ([args option-specs & options]), :doc "Parse arguments sequence according to given option specifications and the\n  GNU Program Argument Syntax Conventions:\n\n    https://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html\n\n  Option specifications are a sequence of vectors with the following format:\n\n    [short-opt long-opt-with-required-description description\n     :property value]\n\n  The first three string parameters in an option spec are positional and\n  optional, and may be nil in order to specify a later parameter.\n\n  By default, options are toggles that default to nil, but the second string\n  parameter may be used to specify that an option requires an argument.\n\n    e.g. [\"-p\" \"--port PORT\"] specifies that --port requires an argument,\n         of which PORT is a short description.\n\n  The :property value pairs are optional and take precedence over the\n  positional string arguments. The valid properties are:\n\n    :id           The key for this option in the resulting option map. This\n                  is normally set to the keywordized name of the long option\n                  without the leading dashes.\n\n                  Multiple option entries can share the same :id in order to\n                  transform a value in different ways, but only one of these\n                  option entries may contain a :default entry.\n\n                  This option is mandatory.\n\n    :short-opt    The short format for this option, normally set by the first\n                  positional string parameter: e.g. \"-p\". Must be unique.\n\n    :long-opt     The long format for this option, normally set by the second\n                  positional string parameter; e.g. \"--port\". Must be unique.\n\n    :required     A description of the required argument for this option if\n                  one is required; normally set in the second positional\n                  string parameter after the long option: \"--port PORT\".\n\n                  The absence of this entry indicates that the option is a\n                  boolean toggle that is set to true when specified on the\n                  command line.\n\n    :desc         A optional short description of this option.\n\n    :default      The default value of this option. If none is specified, the\n                  resulting option map will not contain an entry for this\n                  option unless set on the command line.\n\n    :default-desc An optional description of the default value. This should be\n                  used when the string representation of the default value is\n                  too ugly to be printed on the command line.\n\n    :parse-fn     A function that receives the required option argument and\n                  returns the option value.\n\n                  If this is a boolean option, parse-fn will receive the value\n                  true. This may be used to invert the logic of this option:\n\n                  [\"-q\" \"--quiet\"\n                   :id :verbose\n                   :default true\n                   :parse-fn not]\n\n    :assoc-fn     A function that receives the current option map, the current\n                  option :id, and the current parsed option value, and returns\n                  a new option map.\n\n                  This may be used to create non-idempotent options, like\n                  setting a verbosity level by specifying an option multiple\n                  times. (\"-vvv\" -> 3)\n\n                  [\"-v\" \"--verbose\"\n                   :default 0\n                   :assoc-fn (fn [m k _] (update-in m [k] inc))]\n\n    :validate     A vector of [validate-fn validate-msg ...]. Multiple pairs\n                  of validation functions and error messages may be provided.\n\n    :validate-fn  A vector of functions that receives the parsed option value\n                  and returns a falsy value or throws an exception when the\n                  value is invalid. The validations are tried in the given\n                  order.\n\n    :validate-msg A vector of error messages corresponding to :validate-fn\n                  that will be added to the :errors vector on validation\n                  failure.\n\n  parse-opts returns a map with four entries:\n\n    {:options     The options map, keyed by :id, mapped to the parsed value\n     :arguments   A vector of unprocessed arguments\n     :summary     A string containing a minimal options summary\n     :errors      A possible vector of error message strings generated during\n                  parsing; nil when no errors exist}\n\n  A few function options may be specified to influence the behavior of\n  parse-opts:\n\n    :in-order     Stop option processing at the first unknown argument. Useful\n                  for building programs with subcommands that have their own\n                  option specs.\n\n    :no-defaults  Only include option values specified in arguments and do not\n                  include any default values in the resulting options map.\n                  Useful for parsing options from multiple sources; i.e. from a\n                  config file and from the command line.\n\n    :strict       Parse required arguments strictly: if a required argument value\n                  matches any other option, it is considered to be missing (and\n                  you have a parse error).\n\n    :summary-fn   A function that receives the sequence of compiled option specs\n                  (documented at #'clojure.tools.cli/compile-option-specs), and\n                  returns a custom option summary string.\n  "}, parse-value {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 194, :column 8, :end-line 194, :end-column 19, :private true, :arglists (quote ([value spec opt optarg]))}, :private true, :name cljs.tools.cli/parse-value, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :end-column 19, :method-params ([value spec opt optarg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 4, :fn-var true, :arglists (quote ([value spec opt optarg]))}, summarize {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 293, :column 25, :end-line 293, :end-column 34, :added "0.3.0", :arglists (quote ([specs])), :doc "Reduce options specs into a options summary for printing at a terminal.\n  Note that the specs argument should be the compiled version. That effectively\n  means that you shouldn't call summarize directly. When you call parse-opts\n  you get back a :summary key which is the result of calling summarize (or\n  your user-supplied :summary-fn option) on the compiled option specs."}, :added "0.3.0", :name cljs.tools.cli/summarize, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :end-column 34, :method-params ([specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 293, :end-line 293, :max-fixed-arity 1, :fn-var true, :arglists (quote ([specs])), :doc "Reduce options specs into a options summary for printing at a terminal.\n  Note that the specs argument should be the compiled version. That effectively\n  means that you shouldn't call summarize directly. When you call parse-opts\n  you get back a :summary key which is the result of calling summarize (or\n  your user-supplied :summary-fn option) on the compiled option specs."}, wrap-val {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 99, :column 8, :end-line 99, :end-column 16, :private true, :arglists (quote ([map key]))}, :private true, :name cljs.tools.cli/wrap-val, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :end-column 16, :method-params ([map key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 2, :fn-var true, :arglists (quote ([map key]))}, find-spec {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 169, :column 8, :end-line 169, :end-column 17, :private true, :arglists (quote ([specs opt-type opt]))}, :private true, :name cljs.tools.cli/find-spec, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :end-column 17, :method-params ([specs opt-type opt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 169, :max-fixed-arity 3, :fn-var true, :arglists (quote ([specs opt-type opt]))}, get-default-options {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 308, :column 25, :end-line 308, :end-column 44, :added "0.3.2", :arglists (quote ([option-specs])), :doc "Extract the map of default options from a sequence of option vectors."}, :added "0.3.2", :name cljs.tools.cli/get-default-options, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :end-column 44, :method-params ([option-specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 308, :end-line 308, :max-fixed-arity 1, :fn-var true, :arglists (quote ([option-specs])), :doc "Extract the map of default options from a sequence of option vectors."}, tokenize-args {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 8, :column 8, :end-line 8, :end-column 21, :private true, :arglists (quote ([required-set args & options])), :doc "Reduce arguments sequence into [opt-type opt ?optarg?] vectors and a vector\n  of remaining arguments. Returns as [option-tokens remaining-args].\n\n  Expands clumped short options like \"-abc\" into:\n  [[:short-opt \"-a\"] [:short-opt \"-b\"] [:short-opt \"-c\"]]\n\n  If \"-b\" were in the set of options that require arguments, \"-abc\" would\n  then be interpreted as: [[:short-opt \"-a\"] [:short-opt \"-b\" \"c\"]]\n\n  Long options with `=` are always parsed as option + optarg, even if nothing\n  follows the `=` sign.\n\n  If the :in-order flag is true, the first non-option, non-optarg argument\n  stops options processing. This is useful for handling subcommand options.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(required-set args options)], :arglists ([required-set args & options]), :arglists-meta (nil)}}, :private true, :name cljs.tools.cli/tokenize-args, :variadic true, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(required-set args options)], :arglists ([required-set args & options]), :arglists-meta (nil)}, :method-params [(required-set args options)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists ([required-set args & options]), :doc "Reduce arguments sequence into [opt-type opt ?optarg?] vectors and a vector\n  of remaining arguments. Returns as [option-tokens remaining-args].\n\n  Expands clumped short options like \"-abc\" into:\n  [[:short-opt \"-a\"] [:short-opt \"-b\"] [:short-opt \"-c\"]]\n\n  If \"-b\" were in the set of options that require arguments, \"-abc\" would\n  then be interpreted as: [[:short-opt \"-a\"] [:short-opt \"-b\" \"c\"]]\n\n  Long options with `=` are always parsed as option + optarg, even if nothing\n  follows the `=` sign.\n\n  If the :in-order flag is true, the first non-option, non-optarg argument\n  stops options processing. This is useful for handling subcommand options."}, parse-option-tokens {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 212, :column 8, :end-line 212, :end-column 27, :private true, :arglists (quote ([specs tokens & options])), :doc "Reduce sequence of [opt-type opt ?optarg?] tokens into a map of\n  {option-id value} merged over the default values in the option\n  specifications.\n\n  If the :no-defaults flag is true, only options specified in the tokens are\n  included in the option-map.\n\n  Unknown options, missing options, missing required arguments, option\n  argument parsing exceptions, and validation failures are collected into\n  a vector of error message strings.\n\n  If the :strict flag is true, required arguments that match other options\n  are treated as missing, instead of a literal value beginning with - or --.\n\n  Returns [option-map error-messages-vector].", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(specs tokens options)], :arglists ([specs tokens & options]), :arglists-meta (nil)}}, :private true, :name cljs.tools.cli/parse-option-tokens, :variadic true, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(specs tokens options)], :arglists ([specs tokens & options]), :arglists-meta (nil)}, :method-params [(specs tokens options)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 2, :fn-var true, :arglists ([specs tokens & options]), :doc "Reduce sequence of [opt-type opt ?optarg?] tokens into a map of\n  {option-id value} merged over the default values in the option\n  specifications.\n\n  If the :no-defaults flag is true, only options specified in the tokens are\n  included in the option-map.\n\n  Unknown options, missing options, missing required arguments, option\n  argument parsing exceptions, and validation failures are collected into\n  a vector of error message strings.\n\n  If the :strict flag is true, required arguments that match other options\n  are treated as missing, instead of a literal value beginning with - or --.\n\n  Returns [option-map error-messages-vector]."}, select-spec-keys {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 61, :column 8, :end-line 61, :end-column 24, :private true, :arglists (quote ([map])), :doc "Select only known spec entries from map and warn the user about unknown\n   entries at development time."}, :private true, :name cljs.tools.cli/select-spec-keys, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :end-column 24, :method-params ([map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([map])), :doc "Select only known spec entries from map and warn the user about unknown\n   entries at development time."}, parse-optarg {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 206, :column 8, :end-line 206, :end-column 20, :private true, :arglists (quote ([spec opt optarg]))}, :private true, :name cljs.tools.cli/parse-optarg, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :end-column 20, :method-params ([spec opt optarg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 3, :fn-var true, :arglists (quote ([spec opt optarg]))}, format-lines {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 273, :column 25, :end-line 273, :end-column 37, :added "0.3.0", :arglists (quote ([lens parts])), :doc "Format a sequence of summary parts into columns. lens is a sequence of\n  lengths to use for parts. There are two sequences of lengths if we are\n  not displaying defaults. There are three sequences of lengths if we\n  are showing defaults."}, :added "0.3.0", :name cljs.tools.cli/format-lines, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :end-column 37, :method-params ([lens parts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 273, :end-line 273, :max-fixed-arity 2, :fn-var true, :arglists (quote ([lens parts])), :doc "Format a sequence of summary parts into columns. lens is a sequence of\n  lengths to use for parts. There are two sequences of lengths if we are\n  not displaying defaults. There are three sequences of lengths if we\n  are showing defaults."}, validate {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 185, :column 8, :end-line 185, :end-column 16, :private true, :arglists (quote ([value spec opt optarg]))}, :private true, :name cljs.tools.cli/validate, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :end-column 16, :method-params ([value spec opt optarg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 4, :fn-var true, :arglists (quote ([value spec opt optarg]))}, validation-error {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 181, :column 8, :end-line 181, :end-column 24, :private true, :arglists (quote ([opt optarg msg]))}, :private true, :name cljs.tools.cli/validation-error, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :end-column 24, :method-params ([opt optarg msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 181, :end-line 181, :max-fixed-arity 3, :fn-var true, :arglists (quote ([opt optarg msg]))}, default-option-map {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 153, :column 8, :end-line 153, :end-column 26, :private true, :arglists (quote ([specs]))}, :private true, :name cljs.tools.cli/default-option-map, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :end-column 26, :method-params ([specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 1, :fn-var true, :arglists (quote ([specs]))}, spec-keys {:name cljs.tools.cli/spec-keys, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 57, :column 1, :end-line 57, :end-column 32, :private true, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 57, :column 23, :end-line 57, :end-column 32, :private true}, :tag cljs.core/IVector}, required-arguments {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 285, :column 8, :end-line 285, :end-column 26, :private true, :arglists (quote ([specs]))}, :private true, :name cljs.tools.cli/required-arguments, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :end-column 26, :method-params ([specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 285, :end-line 285, :max-fixed-arity 1, :fn-var true, :arglists (quote ([specs]))}, parse-error {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 178, :column 8, :end-line 178, :end-column 19, :private true, :arglists (quote ([opt optarg msg]))}, :private true, :name cljs.tools.cli/parse-error, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :end-column 19, :method-params ([opt optarg msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 3, :fn-var true, :arglists (quote ([opt optarg msg]))}, compile-option-specs {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 106, :column 8, :end-line 106, :end-column 28, :private true, :arglists (quote ([option-specs])), :doc "Map a sequence of option specification vectors to a sequence of:\n\n  {:id           Keyword  ; :server\n   :short-opt    String   ; \"-s\"\n   :long-opt     String   ; \"--server\"\n   :required     String   ; \"HOSTNAME\"\n   :desc         String   ; \"Remote server\"\n   :default      Object   ; #<Inet4Address example.com/93.184.216.119>\n   :default-desc String   ; \"example.com\"\n   :parse-fn     IFn      ; #(InetAddress/getByName %)\n   :assoc-fn     IFn      ; assoc\n   :validate-fn  [IFn]    ; [#(instance? Inet4Address %)\n                          ;  #(not (.isMulticastAddress %)]\n   :validate-msg [String] ; [\"Must be an IPv4 host\"\n                          ;  \"Must not be a multicast address\"]\n   :missing      String   ; \"server must be specified\"\n   }\n\n  :id defaults to the keywordized name of long-opt without leading dashes, but\n  may be overridden in the option spec.\n\n  The option spec entry `:validate [fn msg ...]` desugars into the two vector\n  entries :validate-fn and :validate-msg. Multiple pairs of validation\n  functions and error messages may be provided.\n\n  A :default entry will not be included in the compiled spec unless specified.\n\n  An option spec may also be passed as a map containing the entries above,\n  in which case that subset of the map is transferred directly to the result\n  vector.\n\n  An assertion error is thrown if any :id values are unset, or if there exist\n  any duplicate :id, :short-opt, or :long-opt values."}, :private true, :name cljs.tools.cli/compile-option-specs, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :end-column 28, :method-params ([option-specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([option-specs])), :doc "Map a sequence of option specification vectors to a sequence of:\n\n  {:id           Keyword  ; :server\n   :short-opt    String   ; \"-s\"\n   :long-opt     String   ; \"--server\"\n   :required     String   ; \"HOSTNAME\"\n   :desc         String   ; \"Remote server\"\n   :default      Object   ; #<Inet4Address example.com/93.184.216.119>\n   :default-desc String   ; \"example.com\"\n   :parse-fn     IFn      ; #(InetAddress/getByName %)\n   :assoc-fn     IFn      ; assoc\n   :validate-fn  [IFn]    ; [#(instance? Inet4Address %)\n                          ;  #(not (.isMulticastAddress %)]\n   :validate-msg [String] ; [\"Must be an IPv4 host\"\n                          ;  \"Must not be a multicast address\"]\n   :missing      String   ; \"server must be specified\"\n   }\n\n  :id defaults to the keywordized name of long-opt without leading dashes, but\n  may be overridden in the option spec.\n\n  The option spec entry `:validate [fn msg ...]` desugars into the two vector\n  entries :validate-fn and :validate-msg. Multiple pairs of validation\n  functions and error messages may be provided.\n\n  A :default entry will not be included in the compiled spec unless specified.\n\n  An option spec may also be passed as a map containing the entries above,\n  in which case that subset of the map is transferred directly to the result\n  vector.\n\n  An assertion error is thrown if any :id values are unset, or if there exist\n  any duplicate :id, :short-opt, or :long-opt values."}, make-summary-part {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 257, :column 25, :end-line 257, :end-column 42, :added "0.3.0", :arglists (quote ([show-defaults? spec])), :doc "Given a single compiled option spec, turn it into a formatted string,\n  optionally with its default values if requested."}, :added "0.3.0", :name cljs.tools.cli/make-summary-part, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :end-column 42, :method-params ([show-defaults? spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 257, :end-line 257, :max-fixed-arity 2, :fn-var true, :arglists (quote ([show-defaults? spec])), :doc "Given a single compiled option spec, turn it into a formatted string,\n  optionally with its default values if requested."}, compile-spec {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 72, :column 8, :end-line 72, :end-column 20, :private true, :arglists (quote ([spec]))}, :private true, :name cljs.tools.cli/compile-spec, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :end-column 20, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec]))}, missing-errors {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 160, :column 8, :end-line 160, :end-column 22, :private true, :arglists (quote ([specs])), :doc "Given specs, returns a map of spec id to error message if missing."}, :private true, :name cljs.tools.cli/missing-errors, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :end-column 22, :method-params ([specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 1, :fn-var true, :arglists (quote ([specs])), :doc "Given specs, returns a map of spec id to error message if missing."}, distinct?* {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :line 94, :column 8, :end-line 94, :end-column 18, :private true, :arglists (quote ([coll]))}, :private true, :name cljs.tools.cli/distinct?*, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/cljs/tools/cli.cljs", :end-column 18, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:validate-msg :strict :errors :assoc-fn :desc :validate :cljs.tools.cli/error :else :long-opt :arguments :default :summary-fn :parse-fn :no-defaults :in-order :short-opt :summary :id :default-desc :validate-fn :options :missing :required}, :order [:in-order :long-opt :short-opt :id :required :desc :default :default-desc :parse-fn :assoc-fn :validate-fn :validate-msg :missing :validate :else :cljs.tools.cli/error :no-defaults :strict :summary-fn :options :arguments :summary :errors]}, :doc "Tools for working with command line arguments."}