{:rename-macros {}, :renames {}, :externs {Error {}, Object {all {}, any {}}}, :use-macros {}, :excludes #{map delay mapcat await spread promise}, :name promesa.core, :imports nil, :requires {pt promesa.protocols, promesa.protocols promesa.protocols, impl promesa.impl, promesa.impl promesa.impl, ps promesa.impl.scheduler, promesa.impl.scheduler promesa.impl.scheduler}, :uses nil, :defs {timeout {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 239, :column 10, :end-line 239, :end-column 17, :arglists (quote ([p t] [p t v])), :doc "Returns a cancellable promise that will be fulfilled\n     with this promise's fulfillment value or rejection reason.\n     However, if this promise is not fulfilled or rejected\n     within `ms` milliseconds, the returned promise is cancelled\n     with a TimeoutError", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p t] [p t v]), :arglists ([p t] [p t v]), :arglists-meta (nil nil)}}, :name promesa.core/timeout, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p t] [p t v]), :arglists ([p t] [p t v]), :arglists-meta (nil nil)}, :method-params ([p t] [p t v]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 239, :end-line 239, :max-fixed-arity 3, :fn-var true, :arglists ([p t] [p t v]), :doc "Returns a cancellable promise that will be fulfilled\n     with this promise's fulfillment value or rejection reason.\n     However, if this promise is not fulfilled or rejected\n     within `ms` milliseconds, the returned promise is cancelled\n     with a TimeoutError"}, Promise {:name promesa.core/Promise, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 43, :column 10, :end-line 43, :end-column 30, :const true, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 43, :column 23, :end-line 43, :end-column 30, :const true}, :tag js}, branch {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 149, :column 7, :end-line 149, :end-column 13, :arglists (quote ([p success failure]))}, :name promesa.core/branch, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 13, :method-params ([p success failure]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p success failure]))}, attempt {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 262, :column 7, :end-line 262, :end-column 14, :arglists (quote ([callback])), :doc "A helper for start promise chain without worry about\n  synchronous or asynchronous exceptions. Returns a promise\n  resolved with the return value of the callback."}, :name promesa.core/attempt, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 14, :method-params ([callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 262, :end-line 262, :max-fixed-arity 1, :fn-var true, :arglists (quote ([callback])), :doc "A helper for start promise chain without worry about\n  synchronous or asynchronous exceptions. Returns a promise\n  resolved with the return value of the callback."}, map {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 107, :column 7, :end-line 107, :end-column 10, :arglists (quote ([f p])), :doc "Apply a function to the promise value and\n  return a new promise with the result."}, :name promesa.core/map, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 10, :method-params ([f p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f p])), :doc "Apply a function to the promise value and\n  return a new promise with the result."}, delay {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 248, :column 7, :end-line 248, :end-column 12, :arglists (quote ([t] [t v])), :doc "Given a timeout in miliseconds and optional\n  value, returns a promise that will fulfilled\n  with provided value (or nil) after the\n  time is reached.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([t] [t v]), :arglists ([t] [t v]), :arglists-meta (nil nil)}}, :name promesa.core/delay, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([t] [t v]), :arglists ([t] [t v]), :arglists-meta (nil nil)}, :method-params ([t] [t v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 248, :end-line 248, :max-fixed-arity 2, :fn-var true, :arglists ([t] [t v]), :doc "Given a timeout in miliseconds and optional\n  value, returns a promise that will fulfilled\n  with provided value (or nil) after the\n  time is reached."}, resolved? {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 81, :column 7, :end-line 81, :end-column 16, :arglists (quote ([p])), :doc "Returns true if promise `p` is already fulfilled."}, :name promesa.core/resolved?, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 16, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Returns true if promise `p` is already fulfilled."}, mapcat {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 113, :column 7, :end-line 113, :end-column 13, :arglists (quote ([f p])), :doc "Same as `map` but removes one level of\n  promise neesting. Useful when the map function\n  returns a promise instead of value.\n\n  In JS environment this function is analogous\n  to `map` because the promise abstraction overloads\n  the `map` operator."}, :name promesa.core/mapcat, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 13, :method-params ([f p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f p])), :doc "Same as `map` but removes one level of\n  promise neesting. Useful when the map function\n  returns a promise instead of value.\n\n  In JS environment this function is analogous\n  to `map` because the promise abstraction overloads\n  the `map` operator."}, cancelled? {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 217, :column 7, :end-line 217, :end-column 17, :arglists (quote ([v])), :doc "Return true if `v` is a cancelled promise."}, :name promesa.core/cancelled?, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 17, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Return true if `v` is a cancelled promise."}, await {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 280, :column 7, :end-line 280, :end-column 12, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name promesa.core/await, :variadic true, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 280, :end-line 280, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, bind {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 124, :column 7, :end-line 124, :end-column 11, :arglists (quote ([p f])), :doc "A chain helper for promises."}, :name promesa.core/bind, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 11, :method-params ([p f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p f])), :doc "A chain helper for promises."}, any {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 199, :column 7, :end-line 199, :end-column 10, :arglists (quote ([promises])), :doc "Given an array of promises, return a promise\n  that is fulfilled when first one item in the\n  array is fulfilled."}, :name promesa.core/any, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 10, :method-params ([promises]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 1, :fn-var true, :arglists (quote ([promises])), :doc "Given an array of promises, return a promise\n  that is fulfilled when first one item in the\n  array is fulfilled."}, finally {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 177, :column 7, :end-line 177, :end-column 14, :arglists (quote ([p callback])), :doc "Attach handler to promise that will be\n  executed independently if promise is\n  resolved or rejected."}, :name promesa.core/finally, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 14, :method-params ([p callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p callback])), :doc "Attach handler to promise that will be\n  executed independently if promise is\n  resolved or rejected."}, schedule {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 47, :column 7, :end-line 47, :end-column 15, :arglists (quote ([ms func])), :doc "Schedule a callable to be executed after the `ms` delay\n  is reached.\n\n  In JVM it uses a scheduled executor service and in JS\n  it uses the `setTimeout` function."}, :name promesa.core/schedule, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 15, :method-params ([ms func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ms func])), :doc "Schedule a callable to be executed after the `ms` delay\n  is reached.\n\n  In JVM it uses a scheduled executor service and in JS\n  it uses the `setTimeout` function."}, promisify {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 224, :column 7, :end-line 224, :end-column 16, :arglists (quote ([callable])), :doc "Given a function that accepts a callback as the last argument return other\n  function that returns a promise. Callback is expected to take single\n  parameter (result of a computation)."}, :name promesa.core/promisify, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 16, :method-params ([callable]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 1, :fn-var true, :arglists (quote ([callable])), :doc "Given a function that accepts a callback as the last argument return other\n  function that returns a promise. Callback is expected to take single\n  parameter (result of a computation)."}, rejected {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 63, :column 7, :end-line 63, :end-column 15, :arglists (quote ([v])), :doc "Return a rejected promise with provided reason."}, :name promesa.core/rejected, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 15, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Return a rejected promise with provided reason."}, promise {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 68, :column 7, :end-line 68, :end-column 14, :arglists (quote ([v])), :doc "The promise constructor."}, :name promesa.core/promise, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 14, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "The promise constructor."}, cancel! {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 211, :column 7, :end-line 211, :end-column 14, :arglists (quote ([p])), :doc "Cancel the promise."}, :name promesa.core/cancel!, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 14, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 211, :end-line 211, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Cancel the promise."}, done? {:name promesa.core/done?, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 101, :column 1, :end-line 101, :end-column 11, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 101, :column 6, :end-line 101, :end-column 11}, :doc "Returns true if promise `p` is already done.", :tag boolean}, err {:name promesa.core/err, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 173, :column 1, :end-line 173, :end-column 9, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 173, :column 6, :end-line 173, :end-column 9}, :doc "A short alias for `error` function."}, all {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 187, :column 7, :end-line 187, :end-column 10, :arglists (quote ([promises])), :doc "Given an array of promises, return a promise\n  that is fulfilled  when all the items in the\n  array are fulfilled."}, :name promesa.core/all, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 10, :method-params ([promises]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 187, :end-line 187, :max-fixed-arity 1, :fn-var true, :arglists (quote ([promises])), :doc "Given an array of promises, return a promise\n  that is fulfilled  when all the items in the\n  array are fulfilled."}, promise? {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 73, :column 7, :end-line 73, :end-column 15, :arglists (quote ([v])), :doc "Return true if `v` is a promise instance."}, :name promesa.core/promise?, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 15, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Return true if `v` is a promise instance."}, resolved {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 58, :column 7, :end-line 58, :end-column 15, :arglists (quote ([v])), :doc "Return a resolved promise with provided value."}, :name promesa.core/resolved, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 15, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Return a resolved promise with provided value."}, catch {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 155, :column 7, :end-line 155, :end-column 12, :arglists (quote ([p f] [p pred-or-type f])), :doc "Catch all promise chain helper.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p f] [p pred-or-type f]), :arglists ([p f] [p pred-or-type f]), :arglists-meta (nil nil)}}, :name promesa.core/catch, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p f] [p pred-or-type f]), :arglists ([p f] [p pred-or-type f]), :arglists-meta (nil nil)}, :method-params ([p f] [p pred-or-type f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 3, :fn-var true, :arglists ([p f] [p pred-or-type f]), :doc "Catch all promise chain helper."}, chain {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 144, :column 7, :end-line 144, :end-column 12, :arglists (quote ([p & funcs])), :doc "Like then but accepts multiple parameters.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(p funcs)], :arglists ([p & funcs]), :arglists-meta (nil)}}, :name promesa.core/chain, :variadic true, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(p funcs)], :arglists ([p & funcs]), :arglists-meta (nil)}, :method-params [(p funcs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 1, :fn-var true, :arglists ([p & funcs]), :doc "Like then but accepts multiple parameters."}, rejected? {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 86, :column 7, :end-line 86, :end-column 16, :arglists (quote ([p])), :doc "Returns true if promise `p` is already rejected."}, :name promesa.core/rejected?, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 16, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Returns true if promise `p` is already rejected."}, then {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 129, :column 7, :end-line 129, :end-column 11, :arglists (quote ([p f])), :doc "Similar to `map` but with parameters inverted\n  for convenience and for familiarity with\n  javascript's promises `.then` operator.\n\n  Unlike Clojure's `map`, will resolve any promises\n  returned  by `f`."}, :name promesa.core/then, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 11, :method-params ([p f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p f])), :doc "Similar to `map` but with parameters inverted\n  for convenience and for familiarity with\n  javascript's promises `.then` operator.\n\n  Unlike Clojure's `map`, will resolve any promises\n  returned  by `f`."}, extract {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 96, :column 7, :end-line 96, :end-column 14, :arglists (quote ([p])), :doc "Returns the current promise value."}, :name promesa.core/extract, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 14, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Returns the current promise value."}, error {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 168, :column 7, :end-line 168, :end-column 12, :arglists (quote ([f p] [f type p])), :doc "Same as `catch` but with parameters inverted.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f p] [f type p]), :arglists ([f p] [f type p]), :arglists-meta (nil nil)}}, :name promesa.core/error, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f p] [f type p]), :arglists ([f p] [f type p]), :arglists-meta (nil nil)}, :method-params ([f p] [f type p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 3, :fn-var true, :arglists ([f p] [f type p]), :doc "Same as `catch` but with parameters inverted."}, pending? {:protocol-inline nil, :meta {:file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :line 91, :column 7, :end-line 91, :end-column 15, :arglists (quote ([p])), :doc "Returns true if promise `p` is stil pending."}, :name promesa.core/pending?, :variadic false, :file "/Users/vitalijreicherdt/BlockChain/Fabric/B9Lab/chaintool/fabric-chaintool/examples/example02/client/cljs/target/nodecljs/src/promesa/core.cljc", :end-column 15, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Returns true if promise `p` is stil pending."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc nil}